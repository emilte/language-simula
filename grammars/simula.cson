# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

"scopeName": 'source.simula'
"name": 'Simula'
"fileTypes": [
    'sim'
]
'firstLineMatch': '^#![ \\t]*/.*\\bsimula[\\d\\.]*\\b'
"limitLineLength": false

"patterns": [
    {
        'begin': '\\*\\*\\*'
        'end': '\\*\\*\\*'
        'name': 'comment.block.simula'
    }

    {
        'begin': '!'
        'end': '$'
        'name': 'comment.block.simula'
    }

    {
        "match": "\\b(begin|end|external|new|none)\\b"
        "name": "keyword.other.simula"
    }

    {
        'match': '\\b(class)\\b'
        'name': 'support.class.simula'
    }

    {
        'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
        'name': 'constant.numeric.simula'
    }

    {
        'comment': 'keywords that delimit flow conditionals'
        'match': '\\b(if|elif|else|then)\\b'
        'name': 'keyword.control.conditional.simula'
    }

    {
        'comment': 'keywords that delimit loops'
        'match': '\\b(for|while|until|do|step)\\b'
        'name': 'keyword.control.repeat.simula'
    }

    {
        'comment': 'keywords that alter flow from within a block'
        'match': '\\b(exit|with|break|continue|pass|return|yield(\\s+from)?|await)\\b'
        'name': 'keyword.control.statement.simula'
    }

    {
        'comment': 'keyword operators that evaluate to True or False'
        'match': '\\b(and|in|is|not|or)\\b'
        'name': 'keyword.other.logical.simula'
    }

    {
        'match': '<\\=|>\\=|\\=\\=|<|>|\\!\\='
        'name': 'keyword.operator.comparison.simula'
    }

    {
        'match': '\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\='
        'name': 'keyword.operator.assignment.augmented.simula'
    }

    {
        'match': '\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~'
        'name': 'keyword.operator.arithmetic.simula'
    }

    {
        'match': '\\='
        'name': 'keyword.operator.assignment.simula'
    }

    {
        'begin': '(")'
        'end': '(")'
        'name': 'string.quoted.double.simula'
    }

    {
        'match': '\\b(text|integer|real|value|procedure|boolean|name|entity|long)\\b'
        'name': 'entity.name.type.simula'
    }

]
